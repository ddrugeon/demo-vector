data_dir: /vector-data-dir
api:
  enabled: true
  address: 127.0.0.1:8686
  playground: false

timezone: "Etc/UTC"
sources:
  host_metrics:
    type: host_metrics
    namespace: host
    collectors:
      - "cpu"
      - "disk"
      - "filesystem"
      - "load"
      - "host"
      - "memory"
      - "network"
    filesystem:
      devices:
        excludes: ["binfmt_misc"]
      filesystems:
        excludes: ["binfmt_misc"]
      mountpoints:
        excludes: ["*/proc/sys/fs/binfmt_misc"]
    scrape_interval_secs: 60

  internal_metrics:
    type: internal_metrics
    namespace: vector
    scrape_interval_secs: 60
    tags:
      pid_key: "pid"
      host_key: "host"

  application_metrics:
    type: prometheus_scrape
    endpoints:
      - http://article-service.wescale.svc.cluster.local:8080/metrics
      - http://cart-service.wescale.svc.cluster.local:8081/metrics
      - http://microservices-redis.wescale.svc.cluster.local:9121/metrics
      - http://microservices-mongodb.wescale.svc.cluster.local:9216/metrics
    scrape_interval_secs: 60
    scrape_timeout_secs: 5
    instance_tag: "component"

  kubernetes_logs:
    # Scrape all logs from kubernetes
    type: kubernetes_logs

transforms:
  rename_component_string:
    # From prometheus metrics, reformat tag component to have the name of
    # the service and not the endpoint

    type: remap
    inputs:
      - application_metrics
    source: |-
      message_parts = split!(.tags.component, ".", limit: 3)
      del(.tags.component)
      .tags.component = message_parts[0]
      .tags.namespace = message_parts[1]

  add_mandatory_tags:
    type: remap
    inputs:
      - host_metrics
      - internal_metrics
      - rename_component_string
    source: |-
      .tags.environment = get_env_var!("ENVIRONMENT")
      .tags.cluster_name = "demo-vector"

sinks:
  stdout:
    type: console
    target: stdout
    inputs:
      - kubernetes_logs
    encoding:
      codec: json

  grafana_cloud:
    type: prometheus_remote_write
    inputs:
      - add_mandatory_tags
    endpoint: ${GRAFANA_CLOUD_URL}
    healthcheck:
      enabled: false
    auth:
      strategy: basic
      user: "${GRAFANA_CLOUD_USER_ID}"
      password: ${GRAFANA_CLOUD_API_KEY}
